{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-markov","text":"<p>django-markov is a reusable Django app that enables you to create Markov text models, and store them in the database. Those models can then be used to generate Markov chain sentences. It relies on the excellent markovify by Jeremy Singer-Vine and spacy.</p> <p> </p> <p>This project is extracted from django-quotes. Once I realized I needed it for another project, but without the quotes, I spent an afternoon splitting it out.</p>"},{"location":"#installation","title":"Installation","text":"<p>Using pip:</p> <pre><code>python -m pip install django-markov\n</code></pre> <p>Using uv:</p> <pre><code>python -m uv pip install django-markov\n</code></pre> <p>This will install the app and all its dependencies but you will still need to download a trained language model.</p> <pre><code>python -m spacy download en-core-web-trf\n</code></pre> <p>Then add the application and its dependency to your Django settings file, and optionally configure the corpus size limit.</p> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"django_markov\",\n    ...,\n]\n\n# Limit the total size of the corpus. This will result in\n# sentences that are less likely to be sensible, but will improve\n# performance when loading the compiled model from the database.\n# Use 0 for no limit, or specify a character limit.\nMARKOV_CORPUS_MAX_CHAR_LIMIT = 0\n</code></pre> <p>Then run migrations as usual.</p> <pre><code>python manage.py migrate\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use, create a model object, and supply it with a corpus of text. This library can be used both in sync and async modes. It follows the Django convention that async methods have the \"a\" prefix to their names, e.g. <code>MarkovTextModel.update_model_from_corpus</code> and <code>MarkovTextModel.aupdate_model_from_corpus</code>.</p> <p>The examples below use the async methods, which are recommended as compiling or loading a large corpus can be a longer operation.</p> <pre><code>from django_markov.models import MarkovTextModel\n\n\nasync def create_my_text_model() -&gt; MarkovTextModel:\n    # Create the model object in the database.\n    text_model = await MarkovTextModel.objects.acreate()\n    # Feed it a corpus of text to build the model.\n    # More is better, and you'll get the best results if you ensure\n    # the sentences in your inputs are well punctuated.\n    await text_model.aupdate_model_from_corpus(\n        corpus_entries=[\n            \"My name is Inigo Montoya\",\n            \"You killed my father.\",\n            \"Prepare to die.\",\n        ],\n        char_limit=0,  # Unlimited\n    )\n    return text_model\n</code></pre> <p>Once you have a model initialized, you can have it generate a sentence. For example, say that you have a text model in your database already, and you want a sentence generated.</p> <pre><code>from django_markov.models import MarkovTextModel\n\n\nasync def sentence(text_model: MarkovTextModel, char_limit: int) -&gt; str | None:\n    # If the model has no data it will return None instead of a str.\n    return await text_model.agenerate_sentence(char_limit=char_limit)\n</code></pre> <p>Every time a sentence is generated the <code>sentence_generated</code> signal will be emitted. You can use this for things like collecting stats, creating an ongoing log of output, etc.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Pull requests and improvements are welcome! First, familiarize yourself with our Code of Conduct. You will need to agree to abide by this to have your contribution included.</p> <p>Django apps are often not fond of <code>src</code> layout packages. To avoid these complications, and to enable debug mode add the following environment variables using <code>.envrc</code> for direnv, a <code>.env</code> file or similar.</p> <pre><code>export DJANGO_SETTINGS_MODULE=\"tests.settings\"\nexport DJANGO_DEBUG=\"True\"\nexport PYTHONPATH=\"$PYTHONPATH:$(pwd)\"\n</code></pre> <p>We use just and Rye to manage our project. If you don't already have <code>just</code> installed, follow the directions on their project page.</p> <p>Then run our setup command.</p> <pre><code>just bootstrap\n</code></pre> <p>It will do the following for you:</p> <ul> <li>Check if you've set the above environment variables.</li> <li>Check if pre-commit is on your path.</li> <li>Check if Rye is installed, and install it if it is not.</li> <li>Install the pre-commit hooks into your repo.</li> <li>Create your virtualenv with all requirements.</li> <li>Run migrations</li> </ul> <p>Our Justfile can handle a lot of the admin tasks for you without having to worry about whether you've activated your venv. To see all the commands you can run <code>just help</code>.</p> <p>For example, to access Django functions such as <code>makemigrations</code>, run:</p> <pre><code>just manage makemigrations django_markov\n</code></pre> <p>To run the test suite:</p> <pre><code>just test\n</code></pre> <p>Then make your changes and commit as usual. Any change made to the behavior or logic should also include tests, and updated documentation. Pull requests must also pass all the pre-commit checks in order to be merged.</p> <p>Once you've finished making all your changes, open a pull request and I'll review it as soon as I can.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Initial release</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at daniel@andrlik.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"license/","title":"License","text":"<p>BSD License</p> <p>Copyright (c) 2024, Daniel Andrlik All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its   contributors may be used to endorse or promote products derived from this   software without specific prior written permission.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#reporting-security-issues","title":"\ud83d\udd10 Reporting Security Issues","text":"<p>Do not open issues that might have security implications! It is critical that security related issues are reported privately so we have time to address them before they become public knowledge.</p> <p>Vulnerabilities can be reported by emailing core members:</p> <ul> <li>Daniel Andrlik daniel@andrlik.org</li> </ul> <p>Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:</p> <ul> <li>Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Environment (e.g. Linux / Windows / macOS)</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p>"},{"location":"security/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"reference/django_markov/admin/","title":"admin","text":"<p>Admin model registration for django_markov.</p>"},{"location":"reference/django_markov/admin/#src.django_markov.admin.MarkovTextModelAdmin","title":"MarkovTextModelAdmin","text":"<p>             Bases: <code>ModelAdmin</code></p> <p>Model admin for MarkovTextModel.</p>"},{"location":"reference/django_markov/apps/","title":"apps","text":""},{"location":"reference/django_markov/apps/#src.django_markov.apps.MarkovConfig","title":"MarkovConfig","text":"<p>             Bases: <code>AppConfig</code></p> <p>App config for Django.</p>"},{"location":"reference/django_markov/models/","title":"models","text":"<p>Models</p>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel","title":"MarkovTextModel","text":"<p>             Bases: <code>Model</code></p> <p>Stores a compiled markov text model.</p> <p>Attributes:</p> Name Type Description <code>created</code> <code>datetime</code> <p>Date and time when the model was created.</p> <code>modified</code> <code>datetime</code> <p>Date and time when the model was last modified.</p> <code>data</code> <code>JSON</code> <p>The compiled text model as JSON.</p>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel.is_ready","title":"is_ready  <code>property</code>","text":"<pre><code>is_ready: bool\n</code></pre> <p>Flag to indicate if the model is initialized and ready to generate sentences.</p>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel.agenerate_sentence","title":"agenerate_sentence  <code>async</code>","text":"<pre><code>agenerate_sentence(char_limit: int = 0) -&gt; str | None\n</code></pre> <p>Generates a random sentence within the character limit based on the model.</p> <p>Parameters:</p> Name Type Description Default <code>char_limit</code> <code>int</code> <p>Maximum characters to use. If zero, no limit.</p> <code>0</code> <p>Returns:     str: Random sentence</p> Source code in <code>src/django_markov/models.py</code> <pre><code>async def agenerate_sentence(self, char_limit: int = 0) -&gt; str | None:\n    \"\"\"Generates a random sentence within the character limit\n    based on the model.\n\n    Args:\n        char_limit (int): Maximum characters to use. If zero, no limit.\n    Returns:\n        str: Random sentence\n    \"\"\"\n    if not self.is_ready:\n        return None\n    text_model = POSifiedText.from_json(self.data)\n    sentence: str | None\n    if char_limit &gt; 0:\n        sentence = text_model.make_short_sentence(max_chars=char_limit)\n    else:\n        sentence = text_model.make_sentence()\n    # Emit a signal that can be used by other apps for things such as statistics.\n    # Right now, pyright doesn't recognize the asend method as valid member of\n    # django.dispatch.Signal\n    if sentence is not None:\n        await sentence_generated.asend(  # type: ignore\n            sender=self.__class__,\n            instance=self,\n            char_limit=char_limit,\n            sentence=sentence,\n        )\n    return sentence\n</code></pre>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel.aupdate_model_from_corpus","title":"aupdate_model_from_corpus  <code>async</code>","text":"<pre><code>aupdate_model_from_corpus(\n    corpus_entries: list[str], char_limit: int | None = None\n) -&gt; None\n</code></pre> <p>Takes the corpus and updates the model, saving it. The corpus must not exceed the char_limit.</p> <p>Parameters:</p> Name Type Description Default <code>corpus_entries</code> <code>list[str]</code> <p>The corpus as a list of text sentences.</p> required <code>char_limit</code> <code>int | None</code> <p>The maximum number of characters to allow in the corpus.</p> <code>None</code> Source code in <code>src/django_markov/models.py</code> <pre><code>async def aupdate_model_from_corpus(\n    self, corpus_entries: list[str], char_limit: int | None = None\n) -&gt; None:\n    \"\"\"Takes the corpus and updates the model, saving it.\n    The corpus must not exceed the char_limit.\n\n    Args:\n        corpus_entries (list[str]): The corpus as a list of text sentences.\n        char_limit (int | None): The maximum number of characters\n            to allow in the corpus.\n    \"\"\"\n    if not char_limit:\n        char_limit = _get_corpus_char_limit()\n    corpus = \" \".join(corpus_entries)\n    if char_limit != 0 and char_limit &lt; len(corpus):\n        msg = f\"Supplied corpus is over the maximum character limit: {char_limit}\"\n        raise ValueError(msg)\n    updated_model = POSifiedText(corpus)\n    updated_model.compile(inplace=True)\n    self.data = updated_model.to_json()\n    await self.asave()\n</code></pre>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel.generate_sentence","title":"generate_sentence","text":"<pre><code>generate_sentence(char_limit: int = 0) -&gt; str | None\n</code></pre> <p>Sync wrapper for agenerate_sentence.</p> Source code in <code>src/django_markov/models.py</code> <pre><code>def generate_sentence(self, char_limit: int = 0) -&gt; str | None:\n    \"\"\"Sync wrapper for agenerate_sentence.\"\"\"\n    return async_to_sync(self.agenerate_sentence)(char_limit)  # no cov\n</code></pre>"},{"location":"reference/django_markov/models/#src.django_markov.models.MarkovTextModel.update_model_from_corpus","title":"update_model_from_corpus","text":"<pre><code>update_model_from_corpus(\n    corpus_entries: list[str], char_limit: int | None = None\n) -&gt; None\n</code></pre> <p>Sync wrapper for the async version</p> Source code in <code>src/django_markov/models.py</code> <pre><code>def update_model_from_corpus(\n    self, corpus_entries: list[str], char_limit: int | None = None\n) -&gt; None:\n    \"\"\"Sync wrapper for the async version\"\"\"\n    async_to_sync(self.aupdate_model_from_corpus)(  # no cov\n        corpus_entries=corpus_entries, char_limit=char_limit\n    )\n</code></pre>"},{"location":"reference/django_markov/text_models/","title":"text_models","text":""},{"location":"reference/django_markov/text_models/#src.django_markov.text_models.POSifiedText","title":"POSifiedText","text":"<p>             Bases: <code>Text</code></p> <p>Uses spacy to parse the text into a model.</p>"},{"location":"reference/django_markov/text_models/#src.django_markov.text_models.POSifiedText.word_join","title":"word_join","text":"<pre><code>word_join(words)\n</code></pre> <p>Join words back into a sentence.</p> Source code in <code>src/django_markov/text_models.py</code> <pre><code>def word_join(self, words):\n    \"\"\"Join words back into a sentence.\"\"\"\n    sentence = \" \".join(word.split(\"::\")[0] for word in words)\n    return sentence\n</code></pre>"},{"location":"reference/django_markov/text_models/#src.django_markov.text_models.POSifiedText.word_split","title":"word_split","text":"<pre><code>word_split(sentence)\n</code></pre> <p>Split the sentence into words and there respective role in the sentence.</p> Source code in <code>src/django_markov/text_models.py</code> <pre><code>def word_split(self, sentence):\n    \"\"\"Split the sentence into words and there respective role in the\n    sentence.\"\"\"\n    return [\"::\".join((word.orth_, word.pos_)) for word in nlp(sentence)]\n</code></pre>"},{"location":"reference/django_markov/urls/","title":"urls","text":"<p>Markov URL Configuration</p> <p>There is nothing required here.</p>"},{"location":"reference/django_markov/views/","title":"views","text":"<p>Markov views</p> <p>No views needed (yet).</p>"}]}